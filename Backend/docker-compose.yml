services:
  web-service:
    build: ./web-service
    ports:
      - "5000:5000"
    env_file:
      - ./web-service/.env
    volumes:
      - ./web-service:/app
      - /app/node_modules
    command: ["node", "server.js"]
    depends_on:
      db-service:
        condition: service_healthy
    networks:
      - backend-network

  # notification-service:
  #   build: ./notification-service
  #   volumes:
  #     - ./notification-service:/app
  #     - /app/node_modules
  #   command: ["node", "notification.js"]
  #   depends_on:
  #     db-service:
  #       condition: service_healthy
  #     redis-service:
  #       condition: service_started

  db-service:
    image: "postgres:latest"
    restart: always
    env_file:
      - ./db-service/.env
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # nginx-service:
  #   image: "nginx:latest"
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     web-service:
  #       condition: service_started
  #     db-service:
  #       condition: service_healthy

  scraping-service:
    build: ./scraping-service
    volumes:
      - ./scraping-service:/app
    depends_on:
      db-service:
        condition: service_healthy
    networks:
      - backend-network


volumes:
  db_data:

networks:
  backend-network:
    driver: bridge