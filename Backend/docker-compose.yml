services:
  users-service:
    build: ./users-service
    env_file:
      - ./users-service/.env
    volumes:
      - ./users-service:/app
      - /app/node_modules
    command: ["node", "server.js"]
    depends_on:
      # users-db:
      #   condition: service_healthy
      messaging-queue-service:
        condition: service_healthy
    networks:
      - backend-network

  jobs-service:
    build: ./jobs-service
    env_file:
      - ./jobs-service/.env
    volumes:
      - ./jobs-service:/app
      - /app/node_modules
    command: ["node", "server.js"]
    depends_on:
      jobs-db:
        condition: service_healthy
      messaging-queue-service:
        condition: service_healthy
    networks:
      - backend-network

  resumes-service:
    build: ./resumes-service
    env_file:
      - ./resumes-service/.env
    volumes:
      - ./resumes-service:/app
      - /app/node_modules
    command: ["node", "server.js"]
    depends_on:
      messaging-queue-service:
        condition: service_healthy
    networks:
      - backend-network

  jobs-db:
    image: "postgres:latest"
    env_file:
      - ./jobs-db/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./jobs-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - backend-network

  messaging-queue-service:
    image: rabbitmq:management
    env_file:
      - ./messaging-queue-service/.env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  scraping-service:
    build: ./scraping-service
    volumes:
      - ./scraping-service:/app
    depends_on:
      jobs-db:
        condition: service_healthy
      messaging-queue-service:
        condition: service_healthy
    networks:
      - backend-network

  # notification-service:
  #   build: ./notification-service
  #   volumes:
  #     - ./notification-service:/app
  #     - /app/node_modules
  #   command: ["node", "notification.js"]
  #   depends_on:
  #     database-service:
  #       condition: service_healthy
  #     redis-service:
  #       condition: service_healthy
  #     messaging-queue-service:
  #       condition: service_healthy
  #   networks:
  #     - backend-network

  redis-service:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - backend-network

  search-index-service:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  search-index-UI-service:
    image: docker.elastic.co/kibana/kibana:8.6.0
    environment:
      - ELASTICSEARCH_HOSTS=http://search-index-service:9200
    ports:
      - "5601:5601"
    depends_on:
      search-index-service:
        condition: service_healthy
    networks:
      - backend-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0
    container_name: logstash
    env_file:
      - ./search-index-service/.env
      - ./messaging-queue-service/.env
    environment:
      - "XPACK_MONITORING_ENABLED=false"
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./search-index-service/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      search-index-service:
        condition: service_healthy
      messaging-queue-service:
        condition: service_healthy
    networks:
      - backend-network

  reverse-proxy:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - users-service
      - jobs-service
      - resumes-service
    networks:
      - backend-network

volumes:
  postgres_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  backend-network:
    driver: bridge
